variables:
  - name: DOMAIN        #override this for you particular environment
    default: "uds.dev"  # defaults to the uds-core-slim-dev local domain
  - name: GREEN
    default: "\\033[0;32m"
  - name RED:
    default: "\\033[0;31m"
  - name: YELLOW
    default: "\\033[0;33m"
  - name: BLUE
    default: "\\033[0;34m"
  - name: MAGENTA
    default: "\\033[0;35m"
  - name: CYAN
    default: "\\033[0;36m"
  - name: RESET
    default: "\\033[0m"  # Reset color 
  # - name: APP_NAME
  #   default: $(kubectl get pods -n podinfo -o json | jq -r '.items[0].metadata.labels.["app.kubernetes.io/name"]')
  - name: ZARF_PKG_PATH
    default: "packages/$APP_NAME"
  - name: ZARF_PKG_ARCH
    default: "arm64"
  - name: ZARF_PKG_VERSION
    default: "6.3.5"

includes:
  - setup: ./tasks/setup.yaml
  - deploy: ./tasks/deploy.yaml
  - scan: ./tasks/dast-scan.yaml

tasks:
  - name: my-test
    actions:
      - task: scan:new-dast-scan

  - name: scan-test
    variables:
      - name: pkg_path
        description: "The file or directory path"
        required: true
    actions:
      - description: "Determine if the path is a file, directory, or invalid"
        cmd: |
          echo "Checking if $pkg_path is a file or directory"
          if [ -f "$pkg_path" ]; then
            echo "$pkg_path is a file"
            # uds run scan:file-task
          elif [ -d "$pkg_path" ]; then
            echo "$pkg_path is a directory"
            # uds run scan:directory-task
          else
            echo "$pkg_path is not a valid file or directory"
            exit 1
          fi
  
  - name: zarf-package-create
    description: "Create the packages in /packages"
    actions:
      - definition: "create all packages in /packages"
        cmd: |
          # loop through all the packages in the packages directory and use zarf package create
          for package in $(ls packages); do
            if [ -d "packages/$package" ]; then
              echo "Creating package $package"
              zarf package create packages/$package -o packages/$package --confirm  
            else
              echo "Skipping $package, not a directory"
            fi
          done

  - name: dast-scan
    description: "Can run the owasp-zap DAST scan on an app deployed into uds"
    actions:
      - definition: " build the dast image from dockerfile"
        task: setup:build-dast-container
      
      - name: validate-uds-core
        description: "Validate the UDS Core bundle"
        cmd: |

          echo $APP_NAME
          if [[ $(zarf tools kubectl get pods -n uds-dev-stack --no-headers | wc -l) -eq 6 && \
          $(zarf tools kubectl get pods -n pepr-system --no-headers | wc -l) -eq 3 ]]; then
            echo "UDS Core is running"
          else
            echo "UDS Core is not running"
            echo "Installing "
            uds deploy k3d-core-slim-dev:0.26.0 --confirm
          fi
      
      - name: get-namespaces
        description: "Get the list of namespaces"
        cmd: |
          NAMESPACES=$(kubectl get namespaces -o json | jq -r '.items[].metadata.name')
          echo "Namespaces: $NAMESPACES"
          export NAMESPACES=$NAMESPACES

      - name: install-app
        description: "Install the $APP_NAME app"
        cmd: |
          echo "Installing the $APP_NAME app"
          uds zarf package deploy packages/podinfo/zarf-package-podinfo-arm64-6.3.5.tar.zst --confirm --no-progress

      # - name: get-scan-endpoint
      #   description: "Get the scan endpoint from the podinfo app Package"
      #   cmd: | 
          
      #     echo "endpoint for dast scan: $GREEN $SCAN_ENDPOINT $RESET"
      - name : scan-run-dast
        description: "Run the OWASP ZAP DAST scan"
        cmd: |
          for package in $(ls packages); do
            echo "Processing package $package"
            # Call zarf-package-create task
            echo "Creating package $package"
            zarf package create packages/$package -o packages/$package --confirm

            # Call install-app task
            echo "Installing the $package app"
            uds zarf package deploy packages/$package/*.tar.zst --confirm --no-progress
            echo "Getting the scan endpoint"
            APP_NAME=$(kubectl get packages -n $package -o json | jq -r '.items[0].metadata.labels.["app.kubernetes.io/name"]')
            APP_ENDPOINTS=$(kubectl get packages -n $APP_NAME -o json | jq -r '.items[0].status.endpoints[]') 
            
            for APP_ENDPOINT in $APP_ENDPOINTS; do
              echo "App endpoint: $APP_ENDPOINT"
              if [[ (-z "$APP_ENDPOINT") || ($APP_ENDPOINT == "null")]]; then
                echo "No app subdomain found \n Does your zarf package have a defined package CR with an endpoint?"
                exit 1
              fi

              SCAN_ENDPOINT="$APP_ENDPOINT"
              
              echo "$BLUE Running DAST scan $RESET"

              echo "endpoint for dast scan: $YELLOW $SCAN_ENDPOINT $RESET"
              docker run --network="host" -v $(pwd):/zap/wrk -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://${SCAN_ENDPOINT} -r $package.$APP_ENDPOINT.report.html -J $package.$APP_ENDPOINT.report.json && sleep 2
              echo "DAST scan complete"
            done
          done

  - name: dast-scan-everything
    description: "Loop through packages, create package, install app, and run DAST scan"
    actions:
      - definition: "Loop through all packages and perform tasks"
        cmd: |
          # Get the list of namespaces
          NAMESPACES=$(kubectl get namespaces -o json | jq -r '.items[].metadata.name')
          
          for namespace in $NAMESPACES; do
            echo "Processing namespace $namespace"
            packages=$(kubectl get packages -n $namespace -o json | jq -r '.items[].metadata.name')

            for package in $packages; do
              echo "Processing package $package"
              echo "Getting the scan endpoint"
              APP_NAME=$(kubectl get packages -n $package -o json | jq -r '.items[0].metadata.name')
              APP_ENDPOINTS=$(kubectl get packages -n $APP_NAME -o json | jq -r '.items[0].status.endpoints[]') 
              
              for APP_ENDPOINT in $APP_ENDPOINTS; do
                echo "App endpoint: $APP_ENDPOINT"
                if [[ (-z "$APP_ENDPOINT") || ($APP_ENDPOINT == "null")]]; then
                  echo "No app subdomain found \n Does your zarf package have a defined package CR with an endpoint?"
                  exit 1
                fi

                SCAN_ENDPOINT="$APP_ENDPOINT"
                
                echo "$BLUE Running DAST scan $RESET"

                echo "endpoint for dast scan: $YELLOW $SCAN_ENDPOINT $RESET"
                docker run --network="host" --name ephem-dast -v "$(pwd):/zap/wrk" -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://${SCAN_ENDPOINT} -r $package.$APP_ENDPOINT.report.html -J $package.$APP_ENDPOINT.report.json && sleep 2
                echo "DAST scan complete"

                # Free up resources by deleting the container
                echo "Cleaning up resources"
                docker rm -f ephem-dast
              done
            done
          done
            
  - name: dast-scan-zarf-yaml
    variables:
      - name: zarf_yaml_dir
        description: "The directory path that contains a zarf.yaml"
        required: true
    actions:
      - definition: "DAST scan a single package"
        cmd: |
          if [ -d "$zarf_yaml_dir" ]; then
            echo "Processing package at $zarf_yaml_dir"
            # Call zarf-package-create task
            echo "Creating package at $zarf_yaml_dir"
            zarf package create $zarf_yaml_dir -o $zarf_yaml_dir --confirm
  
            # Call install-app task
            echo "Installing the app from $zarf_yaml_dir"
            uds zarf package deploy $zarf_yaml_dir/*.tar.zst --confirm --no-progress
  
            # Call scan-run-dast task
            echo "Processing package $package"
            echo "Getting the scan endpoint"
            APP_NAME=$(kubectl get packages -n $package -o json | jq -r '.items[0].metadata.name')
            APP_ENDPOINTS=$(kubectl get packages -n $APP_NAME -o json | jq -r '.items[0].status.endpoints[]') 
            
            for APP_ENDPOINT in $APP_ENDPOINTS; do
              echo "App endpoint: $APP_ENDPOINT"
              if [[ (-z "$APP_ENDPOINT") || ($APP_ENDPOINT == "null")]]; then
                echo "No app subdomain found \n Does your zarf package have a defined package CR with an endpoint?"
                exit 1
              fi

              SCAN_ENDPOINT="$APP_ENDPOINT"
              
              echo "$BLUE Running DAST scan $RESET"

              echo "endpoint for dast scan: $YELLOW $SCAN_ENDPOINT $RESET"
              docker run --network="host" --name ephem-dast -v "$(pwd):/zap/wrk" -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://${SCAN_ENDPOINT} -r $package.$APP_ENDPOINT.report.html -J $package.$APP_ENDPOINT.report.json && sleep 2
              echo "DAST scan complete"

              # Free up resources by deleting the container
              echo "Cleaning up resources"
              docker rm -f ephem-dast
            done
          else
            echo "Skipping $zarf_yaml_dir, not a directory"
          fi

  - name: dast-scan-zarf-package
    variables:
      - name: package
        description: "The filepath to the zarf package to scan"
        required: true
    actions:
      - definition: "DAST scan a single package"
        cmd: |
          if [ -f $package ]; then
            echo "Processing package $package_name"
  
            # Call install-app task
            echo "Installing the $package_name app"
            uds zarf package deploy $package_name --confirm --no-progress
  
            # Call scan-run-dast task
            echo "Getting the scan endpoint"
            APP_NAME=$(kubectl get packages -n $package -o json | jq -r '.items[0].metadata.name')
            APP_ENDPOINTS=$(kubectl get packages -n $APP_NAME -o json | jq -r '.items[0].status.endpoints[]') 
            
            for APP_ENDPOINT in $APP_ENDPOINTS; do
              echo "App endpoint: $APP_ENDPOINT"
              if [[ (-z "$APP_ENDPOINT") || ($APP_ENDPOINT == "null")]]; then
                echo "No app subdomain found \n Does your zarf package have a defined package CR with an endpoint?"
                exit 1
              fi

              SCAN_ENDPOINT="$APP_ENDPOINT"
              
              echo "$BLUE Running DAST scan $RESET"

              echo "endpoint for dast scan: $YELLOW $SCAN_ENDPOINT $RESET"
              docker run --network="host" --name ephem-dast -v "$(pwd):/zap/wrk" -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://${SCAN_ENDPOINT} -r $package.$APP_ENDPOINT.report.html -J $package.$APP_ENDPOINT.report.json && sleep 2
              echo "DAST scan complete"

              # Free up resources by deleting the container
              echo "Cleaning up resources"
              docker rm -f ephem-dast
            done
          else
            echo "Skipping $package_name, not a directory"
          fi